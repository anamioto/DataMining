------------- 3.1
--------- Criar as tabelas, modelo semelhante ao apresentado na seção 2

-- Tabela paciente

CREATE TABLE public.paciente
(
    id_paciente character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ic_sexo character varying(1) COLLATE pg_catalog."default",
    aa_nascimento character varying(4) COLLATE pg_catalog."default",
    cd_pais character varying(2) COLLATE pg_catalog."default",
    cd_uf character varying(2) COLLATE pg_catalog."default",
    cd_municipio character varying(100) COLLATE pg_catalog."default",
    cd_cepreduzido character varying(8) COLLATE pg_catalog."default",
    CONSTRAINT paciente_pkey PRIMARY KEY (id_paciente)
)

TABLESPACE pg_default;

ALTER TABLE public.paciente
    OWNER to postgres;

-- Tabela exames
-- id_atendimento removido

CREATE TABLE public.exames
(
    id_paciente character varying(100) COLLATE pg_catalog."default",
    dt_coleta date,
    de_origem character varying(50) COLLATE pg_catalog."default",
    de_exame character varying(500) COLLATE pg_catalog."default",
    de_analito character varying(500) COLLATE pg_catalog."default",
    de_resultado character varying(2000) COLLATE pg_catalog."default",
    cd_unidade character varying(200) COLLATE pg_catalog."default",
    de_valor_referencia character varying(200) COLLATE pg_catalog."default"
)

TABLESPACE pg_default;

ALTER TABLE public.exames
    OWNER to postgres;
	
-- Tabela desfecho

CREATE TABLE public.desfecho
(
    id_paciente character varying(100) COLLATE pg_catalog."default" NOT NULL,
    id_atendimento character varying(100) COLLATE pg_catalog."default" NOT NULL,
    dt_atendimento date,
    de_tipo_atendimento text COLLATE pg_catalog."default",
    id_clinica numeric,
    de_clinica text COLLATE pg_catalog."default",
    dt_desfecho date,
    de_desfecho text COLLATE pg_catalog."default",
    CONSTRAINT desfecho_pkey PRIMARY KEY (id_paciente, id_atendimento)
)

TABLESPACE pg_default;

ALTER TABLE public.desfecho
    OWNER to postgres;
	
--------- Carga dos dados
-- Adiciona dados na tabela paciente

COPY paciente
FROM 'C:\Temp\HSL_Pacientes_2.csv'
DELIMITER '|' CSV HEADER;
 
COPY paciente
FROM 'C:\Temp\GrupoFleury_Pacientes_2.csv'
DELIMITER '|' CSV HEADER;

-- originalmente fora de ordem o cd_pais, foi necessário alterar -> feito em excel
COPY paciente
FROM 'C:\Temp\EINSTEIN_Pacientes_2.csv'
DELIMITER ';' CSV HEADER;

-- Adiciona dados na tabela exames
-- coluna de_hospital não acrescentado

-- id_atendimento não adicionada por questões de não conter nos dados dos outros hospitais
COPY exames
FROM 'C:\Temp\HSL_Exames_2.csv'
DELIMITER ';' CSV HEADER;

COPY exames
FROM 'C:\Temp\GrupoFleury_Exames_2.csv'
DELIMITER '|' CSV HEADER;

COPY exames
FROM 'C:\Temp\EINSTEIN_Exames_2.csv'
DELIMITER '|' CSV HEADER;

-- Adiciona dados na tabela desfecho

COPY desfecho
FROM 'C:\Temp\HSL_Desfechos_2.csv'
DELIMITER '|' CSV HEADER;

-- Adicionar coluna id_exame na tabela exames
ALTER TABLE public.exames
    ADD COLUMN id_exame integer NOT NULL GENERATED BY DEFAULT AS IDENTITY;
	
-- Validando a carga dos dados

select * from paciente;

select * from exames;

select * from desfecho;

-------- Tratamento inicial

-- Os valores de aa_nascimento iremos passar para valores em idade

-- análise do atributo
select aa_nascimento
from paciente;

ALTER TABLE public.paciente 
ADD COLUMN idade integer;

update paciente set aa_nascimento ='YYYY' where aa_nascimento ='AAAA'
update paciente set idade = null where aa_nascimento = 'YYYY';
update paciente set idade = (date_part('year', CURRENT_DATE)-aa_nascimento::INTEGER) where aa_nascimento <> 'YYYY'; 

-- Validando nova coluna
select idade
from paciente;

-- Removeremos a coluna aa_nascimento, uma vez que temos a idade 

alter table paciente drop column aa_nascimento;

-- Removeremos a coluna pais, uma vez que a maior parte é do Brasil e poucos estão sem valor

-- análise do atributo
select cd_pais, count(cd_pais) 
from paciente
group by cd_pais;

alter table paciente drop column cd_pais;

-- Há municípios que possuem o nome, porém não possuem o estado, vamos substitui-los

-- análise do atributo
select id_paciente ,cd_uf,cd_municipio
from paciente
where cd_uf = 'UU'
order by cd_municipio;

update paciente set cd_uf = 'SP' where cd_municipio = 'SAO PAULO';
update paciente set cd_uf = 'DF' where cd_municipio = 'BRASILIA';

-- Os estados iremos discretizar transformando-os em regiões

-- análise do atributo
select cd_uf, count(cd_uf) 
from paciente
group by cd_uf;

-- Criação da coluna cd_regiao

ALTER TABLE public.paciente
    ADD COLUMN cd_regiao character varying;

-- dados faltantes 'UU'
update paciente set cd_regiao = null where cd_uf = 'UU';

-- Região Norte

update paciente set cd_regiao ='NORTE' where cd_uf ='AP' 
or cd_uf ='PA' or cd_uf ='TO' 
or cd_uf ='AM' or cd_uf ='RO' 
or cd_uf ='RR';

-- Região Nordeste

update paciente set cd_regiao ='NORDESTE' where cd_uf ='AL' 
or cd_uf ='BA' or cd_uf ='CE' or cd_uf ='MA' 
or cd_uf ='PB' or cd_uf ='PI' or cd_uf ='PE'
or cd_uf ='RN'   or cd_uf ='SE';

-- Região Centro-Oeste

update paciente set cd_regiao ='CENTRO-OESTE' where cd_uf ='DF' 
or cd_uf ='GO' or cd_uf ='MT' or cd_uf ='MS';

-- Região Sudeste

update paciente set cd_regiao ='SUDESTE' where cd_uf ='SP' 
or cd_uf ='ES' or cd_uf ='MG' or cd_uf ='RJ';

-- Região Sul

update paciente set cd_regiao ='SUL' where cd_uf ='PR' 
or cd_uf ='RS' or cd_uf ='SC';

-- Validando a nova coluna

select cd_regiao 
from paciente;

-- Removeremos a coluna cd_cepreduzido, uma vez que maioria dos dados encontra-se vazia e é um atributo complexo de discretizar

-- análise do atributo
select cd_cepreduzido, count(cd_cepreduzido)
from paciente
group by cd_cepreduzido;

alter table paciente drop column cd_cepreduzido;

-- Removeremos a coluna cd_municipio, uma vez que é um atributo complexo de discretizar e iremos utilizar as regiões como localidade

alter table paciente drop column cd_municipio;

-- Removeremos a coluna cd_pais que já foi tratada (discretizada)

alter table paciente drop column cd_pais;

-- Busca pelos exames iguais ao 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR', porém que possuem nomes diferentes

SELECT de_exame, count(de_exame)  
FROM exames e 
WHERE UPPER(de_exame) similar to '%COV%'
OR UPPER(de_exame) similar to '%SARS%'
or upper(de_exame) similar to '%CORONA%'
or upper(de_exame) similar to '%PCR%'
group by de_exame;

-- Padronizando os exames iguais para o nome 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR'

update exames set de_exame = 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR' where de_exame = 'Detecção de Coronavírus (NCoV-2019) POR PCR (Anatomia Patológica)';

update exames set de_exame = 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR' where de_exame = 'COVID-19-PCR para SARS-COV-2, Vários Materiais (Fleury)';

update exames set de_exame = 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR' where de_exame = 'PCR em tempo real para detecção de Coron';

-- Padronizando os resultados para o mesmo resultado que o 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR'

update exames set de_resultado = 'NÃO DETECTADO' where de_resultado = 'NÃO DETECTADO (NEGATIVO)';
update exames set de_resultado = 'NÃO DETECTADO' where de_resultado = 'Não detectado';
update exames set de_resultado = 'NÃO DETECTADO' where de_resultado = 'Não Detectado';
update exames set de_resultado = 'NÃO DETECTADO' where de_resultado = 'INDETECTÁVEL';
update exames set de_resultado = 'DETECTADO' where de_resultado = 'Detectado';
update exames set de_resultado = 'DETECTADO' where de_resultado = 'detectado';
update exames set de_resultado = 'DETECTADO' where de_resultado = 'DETECTÁVEL';
update exames set de_resultado = 'DETECTADO' where de_resultado = 'DETECTADO (POSITIVO)';
update exames set de_resultado = 'INCONCLUSIVO' where de_resultado = 'Inconclusivo';
update exames set de_resultado = 'INCONCLUSIVO' where de_resultado = 'inconclusivo';

----------- 3.2 Juntando as tabelas que iremos trabalhar em python
--- Iremos descartar a tabela desfecho por conter uma quantidade pequena de informações relevantes

insert into covid 
(select p.id_paciente, p.ic_sexo, p.idade, p.cd_regiao, e.de_exame, e.dt_coleta ,e.de_resultado
	from paciente p
	inner join exames e
	on (p.id_paciente = e.id_paciente) 
	where de_exame = 'NOVO CORONAVÍRUS 2019 (SARS-CoV-2), DETECÇÃO POR PCR'
	and (de_resultado = 'DETECTADO' or de_resultado = 'NÃO DETECTADO'));
